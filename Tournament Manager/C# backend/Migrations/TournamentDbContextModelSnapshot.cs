// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TournamentBackEnd.TournamentDatabase;

#nullable disable

namespace TournamentBackEnd.Migrations
{
    [DbContext(typeof(TournamentDbContext))]
    partial class TournamentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeamTournamentNode", b =>
                {
                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentsAsAnAtendeeId")
                        .HasColumnType("int");

                    b.HasKey("TeamsId", "TournamentsAsAnAtendeeId");

                    b.HasIndex("TournamentsAsAnAtendeeId");

                    b.ToTable("TeamTournamentNode");
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Node.TournamentNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<int>("ScoreA")
                        .HasColumnType("int");

                    b.Property<int>("ScoreB")
                        .HasColumnType("int");

                    b.Property<int?>("SuccessorId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentIdUser")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentNodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuccessorId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentNodeId");

                    b.ToTable("TournamentNodes");
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Team.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TournamentId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Tournament.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RootNodeId")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RootNodeId")
                        .IsUnique()
                        .HasFilter("[RootNodeId] IS NOT NULL");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TournamentManagaer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Dtos.Team.CreateTeamDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreateTeamDto");
                });

            modelBuilder.Entity("TeamTournamentNode", b =>
                {
                    b.HasOne("TournamentBackEnd.Models.Team.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentBackEnd.Models.Node.TournamentNode", null)
                        .WithMany()
                        .HasForeignKey("TournamentsAsAnAtendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Node.TournamentNode", b =>
                {
                    b.HasOne("TournamentBackEnd.Models.Node.TournamentNode", "Successor")
                        .WithMany()
                        .HasForeignKey("SuccessorId");

                    b.HasOne("TournamentBackEnd.Models.Tournament.Tournament", "Tournament")
                        .WithMany("TournamentNodes")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentBackEnd.Models.Node.TournamentNode", null)
                        .WithMany("Successors")
                        .HasForeignKey("TournamentNodeId");

                    b.Navigation("Successor");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Team.Team", b =>
                {
                    b.HasOne("TournamentBackEnd.Models.Tournament.Tournament", null)
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Tournament.Tournament", b =>
                {
                    b.HasOne("TournamentBackEnd.Models.Node.TournamentNode", "RootNode")
                        .WithOne()
                        .HasForeignKey("TournamentBackEnd.Models.Tournament.Tournament", "RootNodeId");

                    b.Navigation("RootNode");
                });

            modelBuilder.Entity("TournamentManagaer.Entities.User", b =>
                {
                    b.HasOne("TournamentBackEnd.Models.Team.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Node.TournamentNode", b =>
                {
                    b.Navigation("Successors");
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Team.Team", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("TournamentBackEnd.Models.Tournament.Tournament", b =>
                {
                    b.Navigation("Teams");

                    b.Navigation("TournamentNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
